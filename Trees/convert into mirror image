import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

public class convert_into_mirror_image {

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		int n= sc.nextInt();
		Node root=null;
		for(int i=0;i<n;i++) {
			int data=sc.nextInt();
			root=insert(root,data);
		}
		System.out.print("Inorder Traversal Before= ");
		display(root);
		convertTomirror(root);
		System.out.println();
		System.out.print("Inorder Traversal After = ");
		display(root);

	}
	
	private static void convertTomirror(Node root) {
		 if(root==null) {
			 return;
		 }
		 Queue<Node> q = new LinkedList<Node>();
		 q.offer(root);
		 while(!q.isEmpty()) {
			 Node temp = q.poll();
			 Node left=null;
			 Node right=null;
			 if(temp.left!=null) {
				 left=temp.left;
				 q.offer(temp.left);
			 }
			 if(temp.right!=null) {
				 right=temp.right;
				 q.offer(temp.right);
			 }
			 
			 Node temp1 = temp.left;
			 temp.left=right;
			 temp.right=left;
			 
		 }
		 
		 
		
	}

	private static Node insert(Node root,int data) {
		Node current = root;
		Node newNode = new Node(data);
		if(root==null) {
			return newNode;
		}
		Node temp=null;
		while(current!=null) {
			temp=current;
			if(current.data<data) {
				current=current.right;
			}else if(current.data>data) {
				current=current.left;
			}
		}
 
		if(temp.data<data) {
			temp.right=newNode;
		}
		else if(temp.data>data) {
			temp.left=newNode;
		}
		return root;
	}
 
	private static void display(Node root) {
		if(root==null) {
			return;
		}
		display(root.left);
		System.out.print(root.data+" ");
		display(root.right);
	}

}
