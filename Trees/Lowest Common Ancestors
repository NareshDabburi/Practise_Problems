import java.util.Scanner;

// Given two nodes return the lowest common ancestor 
public class LCA {

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		int n= sc.nextInt();
		Node root=null;
		for(int i=0;i<n;i++) {
			int data=sc.nextInt();
			root=insert(root,data);
		}
		int key1=sc.nextInt();
		int key2=sc.nextInt();
		Node l = lca(root,key1,key2);
		System.out.println(l.data);
		
		System.out.print("Inorder Traversal = ");
		display(root);

	}
	private static Node lca(Node root,int key1 ,int key2) {
		if(root==null) {
			return null;
		}
		if(root.data == key1 || root.data == key2) {
			return root;
		}
		Node left=lca(root.left,key1,key2);
		Node right=lca(root.right,key1,key2);
		
		if(left!=null && right!=null) {
			return root;
		}
		if(left == null && right == null) {
			return null;
		}
		
		
		
		return left!=null? left : right;
		
		
		
	}
	private static Node insert(Node root,int data) {
		Node current = root;
		Node newNode = new Node(data);
		if(root==null) {
			return newNode;
		}
		Node temp=null;
		while(current!=null) {
			temp=current;
			if(current.data<data) {
				current=current.right;
			}else if(current.data>data) {
				current=current.left;
			}
		}
 
		if(temp.data<data) {
			temp.right=newNode;
		}
		else if(temp.data>data) {
			temp.left=newNode;
		}
		return root;
	}
 
	private static void display(Node root) {
		if(root==null) {
			return;
		}
		display(root.left);
		System.out.print(root.data+" ");
		display(root.right);
	}

}
